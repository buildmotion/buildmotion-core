{"version":3,"file":"buildmotion-core.umd.js","sources":["../components/alert/models/alert-types.constants.js","../components/alert/models/alert-notification.model.js","../components/alert/alert.component.js","../build-motion-core.module.js","../components/component-base.component.js"],"sourcesContent":["/**\r\n * Use to provide the alert type information for the AlertNotification and AlertComponent.\r\n */\r\nvar AlertTypes = (function () {\r\n    function AlertTypes() {\r\n    }\r\n    AlertTypes.Information = 'alert-info';\r\n    AlertTypes.Warning = 'alert-warning';\r\n    AlertTypes.Danger = 'alert-danger';\r\n    AlertTypes.Success = 'alert-success';\r\n    return AlertTypes;\r\n}());\r\nexport { AlertTypes };\r\n//# sourceMappingURL=alert-types.constants.js.map","import { AlertTypes } from './alert-types.constants';\r\nvar AlertNotification = (function () {\r\n    function AlertNotification(header, title, messages, type) {\r\n        this.type = AlertTypes.Information;\r\n        this.messages = new Array();\r\n        this.showAlert = false;\r\n        if (type) {\r\n            this.type = type;\r\n        }\r\n        this.header = header;\r\n        this.title = title;\r\n        if (messages) {\r\n            this.messages = messages;\r\n        }\r\n        if (this.header && this.title) {\r\n            this.showAlert = true; // used to trigger the display of the notification.\r\n        }\r\n    }\r\n    return AlertNotification;\r\n}());\r\nexport { AlertNotification };\r\n//# sourceMappingURL=alert-notification.model.js.map","import { Component, Input } from '@angular/core';\r\nimport { AlertNotification } from './models/alert-notification.model';\r\nvar AlertComponent = (function () {\r\n    function AlertComponent() {\r\n        this.alertNotification = new AlertNotification('', '');\r\n        // @Input() set showAlert(showAlert: boolean){this.hasMessage = showAlert || false; };\r\n        this.hasMessage = false;\r\n    }\r\n    AlertComponent.prototype.ngOnInit = function () {\r\n    };\r\n    AlertComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'buildmotion-alert',\r\n                    template: \"<div *ngIf=\\\"hasMessage\\\">\\n  <div class=\\\"alert {{alertNotification.type}} fade in\\\">\\n    <!--<a href=\\\"#\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</a>-->\\n    <strong>{{alertNotification.header}}</strong> :: {{alertNotification.title}}\\n    <ul>\\n      <li *ngFor=\\\"let message of alertNotification.messages\\\">{{message}}</li>\\n    </ul>\\n  </div>\\n</div>\"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    AlertComponent.ctorParameters = function () { return []; };\r\n    AlertComponent.propDecorators = {\r\n        \"alertNotification\": [{ type: Input },],\r\n        \"hasMessage\": [{ type: Input },],\r\n    };\r\n    return AlertComponent;\r\n}());\r\nexport { AlertComponent };\r\n//# sourceMappingURL=alert.component.js.map","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BuildMotionFoundationModule } from 'buildmotion-foundation';\r\nimport { BuildMotionLoggingModule } from 'buildmotion-logging';\r\nimport { AlertComponent } from './components/alert/alert.component';\r\nvar BuildMotionCoreModule = (function () {\r\n    function BuildMotionCoreModule() {\r\n    }\r\n    BuildMotionCoreModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        BuildMotionFoundationModule,\r\n                        BuildMotionLoggingModule\r\n                    ],\r\n                    declarations: [\r\n                        AlertComponent\r\n                    ],\r\n                    exports: [\r\n                        AlertComponent\r\n                    ],\r\n                    schemas: [NO_ERRORS_SCHEMA],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    BuildMotionCoreModule.ctorParameters = function () { return []; };\r\n    return BuildMotionCoreModule;\r\n}());\r\nexport { BuildMotionCoreModule };\r\n//# sourceMappingURL=build-motion-core.module.js.map","import { MessageType } from 'angular-rules-engine';\r\nimport { ErrorResponse } from 'buildmotion-foundation';\r\nimport { Severity } from 'buildmotion-logging';\r\nimport { AlertNotification } from './alert/models/alert-notification.model';\r\nimport { AlertTypes } from './alert/models/alert-types.constants';\r\nvar ComponentBase = (function () {\r\n    function ComponentBase(componentName, loggingService, router) {\r\n        this.loggingService = loggingService;\r\n        this.router = router;\r\n        this.componentName = componentName;\r\n        this.alertNotification = new AlertNotification('', '');\r\n    }\r\n    /**\r\n     * Use to create a simple [ErrorResponse] with the specified message.\r\n     * @param message The message to display to the user.\r\n     */\r\n    /**\r\n         * Use to create a simple [ErrorResponse] with the specified message.\r\n         * @param message The message to display to the user.\r\n         */\r\n    ComponentBase.prototype.createErrorResponse = /**\r\n         * Use to create a simple [ErrorResponse] with the specified message.\r\n         * @param message The message to display to the user.\r\n         */\r\n    function (message) {\r\n        this.loggingService.log(this.componentName, Severity.Information, \"Preparing to create error response for component.\");\r\n        var response = new ErrorResponse();\r\n        response.Message = message;\r\n        return response;\r\n    };\r\n    /**\r\n     * Use to handle service errors. These are error response [See: ErrorResponse] from\r\n     * the application business layers (Action(s) or Http) that will bubble up to the\r\n     * caller (i.e., a component) in a specified format:\r\n     *\r\n     * IsSuccess: boolean = false; // default for ErrorResponse\r\n     * Message: string;\r\n     * Errors: Array<ServiceError> = new Array<ServiceError>();\r\n     * Exception: any;\r\n     */\r\n    /**\r\n         * Use to handle service errors. These are error response [See: ErrorResponse] from\r\n         * the application business layers (Action(s) or Http) that will bubble up to the\r\n         * caller (i.e., a component) in a specified format:\r\n         *\r\n         * IsSuccess: boolean = false; // default for ErrorResponse\r\n         * Message: string;\r\n         * Errors: Array<ServiceError> = new Array<ServiceError>();\r\n         * Exception: any;\r\n         */\r\n    ComponentBase.prototype.handleServiceErrors = /**\r\n         * Use to handle service errors. These are error response [See: ErrorResponse] from\r\n         * the application business layers (Action(s) or Http) that will bubble up to the\r\n         * caller (i.e., a component) in a specified format:\r\n         *\r\n         * IsSuccess: boolean = false; // default for ErrorResponse\r\n         * Message: string;\r\n         * Errors: Array<ServiceError> = new Array<ServiceError>();\r\n         * Exception: any;\r\n         */\r\n    function (errorResponse, serviceContext) {\r\n        this.loggingService.log(this.componentName, Severity.Information, \"Preparing to handle service errors for component.\");\r\n        if (serviceContext && serviceContext.hasErrors()) {\r\n            this.loggingService.log(this.componentName, Severity.Information, \"Retrieving error messages from the ServiceContext/ValidationContext;\");\r\n            var messages = this.retrieveServiceContextErrorMessages(serviceContext);\r\n            this.alertNotification = new AlertNotification('Errors', errorResponse.Message, messages, AlertTypes.Warning);\r\n        }\r\n        else {\r\n            if (errorResponse && errorResponse.Message) {\r\n                this.loggingService.log(this.componentName, Severity.Information, \"Retrieving error messages from the [ErrorResponse].\");\r\n                var errors = this.retrieveResponseErrorMessages(errorResponse);\r\n                this.alertNotification = new AlertNotification('Error', errorResponse.Message, errors, AlertTypes.Warning);\r\n                this.loggingService.log(this.componentName, Severity.Error, \"Error: \" + errorResponse.Message);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Use to retrieve the error messages from the specified [ServiceContext].\r\n     *\r\n     * @parm: serviceContext: A context object containing messages for the specified request.\r\n     */\r\n    /**\r\n         * Use to retrieve the error messages from the specified [ServiceContext].\r\n         *\r\n         * @parm: serviceContext: A context object containing messages for the specified request.\r\n         */\r\n    ComponentBase.prototype.retrieveServiceContextErrorMessages = /**\r\n         * Use to retrieve the error messages from the specified [ServiceContext].\r\n         *\r\n         * @parm: serviceContext: A context object containing messages for the specified request.\r\n         */\r\n    function (serviceContext) {\r\n        var messages = Array();\r\n        serviceContext.Messages.forEach(function (e) {\r\n            if (e.MessageType === MessageType.Error && e.DisplayToUser) {\r\n                messages.push(e.Message);\r\n            }\r\n        });\r\n        return messages;\r\n    };\r\n    /**\r\n     * Use to retrieve the error messages from the specified Web API response.\r\n     */\r\n    /**\r\n         * Use to retrieve the error messages from the specified Web API response.\r\n         */\r\n    ComponentBase.prototype.retrieveResponseErrorMessages = /**\r\n         * Use to retrieve the error messages from the specified Web API response.\r\n         */\r\n    function (errorResponse) {\r\n        var errors = new Array();\r\n        if (errorResponse && errorResponse.Errors) {\r\n            errorResponse.Errors.forEach(function (e) {\r\n                if (e.DisplayToUser) {\r\n                    errors.push(e.Message);\r\n                }\r\n            });\r\n        }\r\n        return errors;\r\n    };\r\n    /**\r\n     * Use to reset the [AlertNotification] to the initial state. Removes\r\n     * existing messages and hides the AlertComponent.\r\n     */\r\n    /**\r\n         * Use to reset the [AlertNotification] to the initial state. Removes\r\n         * existing messages and hides the AlertComponent.\r\n         */\r\n    ComponentBase.prototype.resetAlertNotifications = /**\r\n         * Use to reset the [AlertNotification] to the initial state. Removes\r\n         * existing messages and hides the AlertComponent.\r\n         */\r\n    function () {\r\n        this.alertNotification = new AlertNotification('', '');\r\n    };\r\n    /**\r\n     * Use to navigate to the specified route.\r\n     * @parm routeName: The name of the target route.\r\n     */\r\n    /**\r\n         * Use to navigate to the specified route.\r\n         * @parm routeName: The name of the target route.\r\n         */\r\n    ComponentBase.prototype.routeTo = /**\r\n         * Use to navigate to the specified route.\r\n         * @parm routeName: The name of the target route.\r\n         */\r\n    function (routeName) {\r\n        try {\r\n            this.router.navigate([routeName]);\r\n        }\r\n        catch (error) {\r\n            this.loggingService.log(this.componentName, Severity.Error, \"Error while attempting to navigate to [\" + routeName + \"] route from \" + this.componentName + \". Error: \" + error.toString());\r\n        }\r\n    };\r\n    /**\r\n     * Use to retrieve and show any response error messages.\r\n     */\r\n    /**\r\n         * Use to retrieve and show any response error messages.\r\n         */\r\n    ComponentBase.prototype.showResponseErrors = /**\r\n         * Use to retrieve and show any response error messages.\r\n         */\r\n    function (response) {\r\n        // let messages = this.retrieveResponseErrorMessages(response);\r\n        // this.alertNotification = new AlertNotification('Errors', response.Message, messages, AlertTypes.Warning);\r\n        this.handleServiceErrors(response, undefined);\r\n    };\r\n    ComponentBase.prototype.finishRequest = function (message) {\r\n        this.loggingService.log(this.componentName, Severity.Information, this.componentName + \": \" + message);\r\n    };\r\n    ComponentBase.prototype.showAlertMessage = function (message) {\r\n        alert(message);\r\n    };\r\n    return ComponentBase;\r\n}());\r\nexport { ComponentBase };\r\n//# sourceMappingURL=component-base.component.js.map"],"names":["Component","Input","NgModule","CommonModule","BuildMotionFoundationModule","BuildMotionLoggingModule","NO_ERRORS_SCHEMA","Severity","ErrorResponse","MessageType"],"mappings":"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"}