{"version":3,"file":"component-base.component.js","sourceRoot":"","sources":["../../src/app/components/component-base.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,iBAAiB,EAAE,MAAM,yCAAyC,CAAC;AAC5E,OAAO,EAAE,UAAU,EAAE,MAAM,sCAAsC,CAAC;AAElE,IAAA;IAII,uBACI,aAAqB,EACd,cAA8B,EAC9B,MAAc;QADd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QAErB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;KAC1D;IAED;;;OAGG;;;;;IACH,2CAAmB;;;;IAAnB,UAAoB,OAAe;QAC/B,IAAI,QAAQ,GAAkB,IAAI,aAAa,EAAE,CAAC;QAClD,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED;;;;;;;;;OASG;;;;;;;;;;;IACH,2CAAmB;;;;;;;;;;IAAnB,UAAoB,aAA4B,EAAE,cAA+B;QAC7E,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;YAE/C,IAAM,QAAQ,GAAG,IAAI,CAAC,mCAAmC,CAAC,cAAc,CAAC,CAAC;YAC1E,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,QAAQ,EAAE,aAAa,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;SACjH;QAAC,IAAI,CAAC,CAAC;YACA,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7C,IAAM,MAAM,GAAG,IAAI,CAAC,6BAA6B,CAAC,aAAa,CAAC,CAAC;gBACjE,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;gBAC3G,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,KAAK,EAAE,YAAU,aAAa,CAAC,OAAS,CAAC,CAAC;aAClG;SACJ;KACJ;IAED;;;;OAIG;;;;;;IACH,2DAAmC;;;;;IAAnC,UAAoC,cAA8B;QAC9D,IAAM,QAAQ,GAAG,KAAK,EAAU,CAAC;QACjC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBACzD,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;aAC5B;SACJ,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED;;OAEG;;;;IACH,qDAA6B;;;IAA7B,UAA8B,aAA4B;QACtD,IAAM,MAAM,GAAG,IAAI,KAAK,EAAU,CAAC;QACnC,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;YACxC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC;gBAC1B,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;iBAC1B;aACJ,CAAC,CAAC;SACN;QACD,MAAM,CAAC,MAAM,CAAC;KACjB;IAED;;;OAGG;;;;;IACH,+CAAuB;;;;IAAvB;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;KAC1D;IAED;;;OAGG;;;;;IACI,+BAAO;;;;IAAd,UAAe,SAAiB;QAC5B,IAAI,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;SACrC;QAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,KAAK,EAAE,4CAA0C,SAAS,qBAAgB,IAAI,CAAC,aAAa,iBAAY,KAAK,CAAC,QAAQ,EAAI,CAAC,CAAC;SACpL;KACJ;IAED;;OAEG;;;;IACH,0CAAkB;;;IAAlB,UAAmB,QAAuB;;;QAGtC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;KACjD;IAED,qCAAa,GAAb,UAAc,OAAe;QACzB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,EAAK,IAAI,CAAC,aAAa,UAAK,OAAS,CAAC,CAAC;KAC1G;IAES,wCAAgB,GAA1B,UAA2B,OAAe;QACtC,KAAK,CAAC,OAAO,CAAC,CAAC;KAClB;wBA5HL;IA6HC,CAAA;AAlHD,yBAkHC","sourcesContent":["import { Router } from '@angular/router';\r\nimport { LoggingService } from 'buildmotion-logging';\r\n\r\nimport { MessageType } from 'angular-rules-engine';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ServiceMessage } from 'angular-rules-engine';\r\nimport { ErrorResponse } from 'buildmotion-foundation';\r\nimport { Severity } from 'buildmotion-logging';\r\nimport { AlertNotification } from './alert/models/alert-notification.model';\r\nimport { AlertTypes } from './alert/models/alert-types.constants';\r\n\r\nexport class ComponentBase {\r\n    componentName: string;\r\n    alertNotification: AlertNotification;\r\n\r\n    constructor(\r\n        componentName: string,\r\n        public loggingService: LoggingService,\r\n        public router: Router\r\n    ) {\r\n        this.componentName = componentName;\r\n        this.alertNotification = new AlertNotification('', '');\r\n    }\r\n\r\n    /**\r\n     * Use to create a simple [ErrorResponse] with the specified message.\r\n     * @param message The message to display to the user.\r\n     */\r\n    createErrorResponse(message: string): ErrorResponse {\r\n        let response: ErrorResponse = new ErrorResponse();\r\n        response.Message = message;\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Use to handle service errors. These are error response [See: ErrorResponse] from \r\n     * the application business layers (Action(s) or Http) that will bubble up to the \r\n     * caller (i.e., a component) in a specified format:\r\n     *\r\n     * IsSuccess: boolean = false; // default for ErrorResponse\r\n     * Message: string;\r\n     * Errors: Array<ServiceError> = new Array<ServiceError>();\r\n     * Exception: any;\r\n     */\r\n    handleServiceErrors(errorResponse: ErrorResponse, serviceContext?: ServiceContext) {\r\n        if (serviceContext && serviceContext.hasErrors()) {\r\n            // retrieving error messages from the ServiceContext/ValidationContext;\r\n            const messages = this.retrieveServiceContextErrorMessages(serviceContext);\r\n            this.alertNotification = new AlertNotification('Errors', errorResponse.Message, messages, AlertTypes.Warning);\r\n        } else {\r\n                if (errorResponse && errorResponse.Message) {\r\n                const errors = this.retrieveResponseErrorMessages(errorResponse);\r\n                this.alertNotification = new AlertNotification('Error', errorResponse.Message, errors, AlertTypes.Warning);\r\n                this.loggingService.log(this.componentName, Severity.Error, `Error: ${errorResponse.Message}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use to retrieve the error messages from the specified [ServiceContext]. \r\n     *\r\n     * @parm: serviceContext: A context object containing messages for the specified request.\r\n     */\r\n    retrieveServiceContextErrorMessages(serviceContext: ServiceContext): Array<string> {\r\n        const messages = Array<string>();\r\n        serviceContext.Messages.forEach(e => {\r\n            if (e.MessageType === MessageType.Error && e.DisplayToUser) {\r\n                messages.push(e.Message);\r\n            }\r\n        });\r\n\r\n        return messages;\r\n    }\r\n\r\n    /**\r\n     * Use to retrieve the error messages from the specified Web API response. \r\n     */\r\n    retrieveResponseErrorMessages(errorResponse: ErrorResponse) {\r\n        const errors = new Array<string>();\r\n        if (errorResponse && errorResponse.Errors) {\r\n            errorResponse.Errors.forEach(e => {\r\n                if (e.DisplayToUser) {\r\n                    errors.push(e.Message);\r\n                }\r\n            });\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Use to reset the [AlertNotification] to the initial state. Removes\r\n     * existing messages and hides the AlertComponent.\r\n     */\r\n    resetAlertNotifications() {\r\n        this.alertNotification = new AlertNotification('', '');\r\n    }\r\n\r\n    /**\r\n     * Use to navigate to the specified route.\r\n     * @parm routeName: The name of the target route.\r\n     */\r\n    public routeTo(routeName: string) {\r\n        try {\r\n            this.router.navigate([routeName]);\r\n        } catch (error) {\r\n            this.loggingService.log(this.componentName, Severity.Error, `Error while attempting to navigate to [${routeName}] route from ${this.componentName}. Error: ${error.toString()}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use to retrieve and show any response error messages.\r\n     */\r\n    showResponseErrors(response: ErrorResponse) {\r\n        // let messages = this.retrieveResponseErrorMessages(response);\r\n        // this.alertNotification = new AlertNotification('Errors', response.Message, messages, AlertTypes.Warning);\r\n        this.handleServiceErrors(response, undefined);\r\n    }\r\n\r\n    finishRequest(message: string): void {\r\n        this.loggingService.log(this.componentName, Severity.Information, `${this.componentName}: ${message}`);\r\n    }\r\n\r\n    protected showAlertMessage(message: string): void {\r\n        alert(message);\r\n    }\r\n}\r\n"]}